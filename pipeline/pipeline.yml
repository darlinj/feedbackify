---
Description: Sets up a pipeline for an appsync backed react app

Parameters:
  ProjectName:
    Type: String
    Description: Name of the project so it can prefix all the resources
  GithubUser:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Github user
    Default: /service/github/user
  GithubRepo:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Github repo
    Default: /service/github/repo
  GithubToken:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Github token
    NoEcho: true
    Default: /service/github/token

Resources:
  PipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${ProjectName}-pipeline-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"
                Resource:
                  - !Sub "arn:aws:s3:::${PipelineDeployBucket}/*"
        - PolicyName: CodeDeployAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                Resource:
                  - !GetAtt PackageCloudformation.Arn
        - PolicyName: CloudformationAndBuildAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:*"
                  - "codebuild:*"
                Resource: "*"
        - PolicyName: IAMAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iam:*"
                Resource:
                  - !GetAtt CloudformationRole.Arn
  CloudformationRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${ProjectName}-cloudformation-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"
                Resource:
                  - !Sub "arn:aws:s3:::${PipelineDeployBucket}/*"
        - PolicyName: VariousAccessToBuildServices
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iam:*"
                  - "sns:*"
                  - "lambda:*"
                  - "appsync:*"
                  - "dynamodb:*"
                  - "cognito-idp:*"
                Resource: "*"
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-codebuild-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
      Path: /
      Policies:
        - PolicyName: CodeBuildLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}*:*"
        - PolicyName: CodeBuildArtifactsBucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"
                Resource:
                  - !Sub "${PipelineDeployBucket.Arn}/*"
        - PolicyName: CodeBuildParameterStore
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "ssm:GetParameters"
                Resource: "*"
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "cognito-idp:AdminSetUserPassword"
                Resource: "*"
        - PolicyName: OtherAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "dynamodb:*"
                  - "cloudbuild:*"
                Resource: "*"
  PipelineDeployBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub ${ProjectName}-deploy-bucket
  PackageCloudformation:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${ProjectName}-package-cloudformation
      Description: Package the cloudformation and upload to S3
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0 #aws/codebuild/python:3.6.5 # More info on Images: https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html
        EnvironmentVariables:
          - Name: DEPLOYMENT_BUCKET
            Value: !Ref PipelineDeployBucket
      Cache:
        Type: S3
        Location: !Sub ${PipelineDeployBucket}/codebuild-cache
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: api/infra/buildspec.yml
      Tags:
        - Key: "Stack"
          Value: !Ref AWS::StackName
        - Key: "Project"
          Value: !Ref ProjectName
  IntegrationTests:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${ProjectName}-integration-tests
      Description: Run integration tests for front end and backend
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        EnvironmentVariables:
          - Name: REACT_APP_TEST_USERNAME
            Value: "pinky@example.com"
          - Name: REACT_APP_TEST_USER_PASSWORD
            Value: "Passw0rd!"
          - Name: REACT_APP_API_NAME
            Value: !Sub ${ProjectName}Integration
          - Name: REACT_APP_AWS_REGION
            Value: !Ref AWS::Region
      Cache:
        Type: S3
        Location: !Sub ${PipelineDeployBucket}/codebuild-integration-test-cache
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Tags:
        - Key: "Stack"
          Value: !Ref AWS::StackName
        - Key: "Project"
          Value: !Ref ProjectName
  Webhook:
    Type: "AWS::CodePipeline::Webhook"
    Properties:
      AuthenticationConfiguration:
        SecretToken: !Ref GithubToken
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/master
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref Pipeline
      TargetAction: SourceCodeRepo
      Name: MyWebhook
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: "true"
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${ProjectName}-pipeline
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceCodeRepo
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: !Ref GithubUser
                Repo: !Ref GithubRepo
                Branch: master
                OAuthToken: !Ref GithubToken
              OutputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: PackageCloudformation
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref PackageCloudformation
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: packagedCloudformationTemplates
              RunOrder: 1
            - Name: ExecuteCloudformation
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Sub ${ProjectName}-cloudformation-stack
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt CloudformationRole.Arn
                TemplatePath: packagedCloudformationTemplates::packagedTemplate.yml
                ParameterOverrides: !Sub '{ "APIName": "${ProjectName}Integration" , "SiteURL": "http://example.com"}'
              InputArtifacts:
                - Name: packagedCloudformationTemplates
              Namespace: APIDeploymentOutput
              RunOrder: 2
        - Name: Test
          Actions:
            - Name: IntegrationTests
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref IntegrationTests
                EnvironmentVariables: '[{"name":"REACT_APP_APIEndpoint","value":"#{APIDeploymentOutput.GraphQLApiEndpoint}","type":"PLAINTEXT"},
                {"name":"REACT_APP_USER_POOL_ID","value":"#{APIDeploymentOutput.CognitoUserPoolId}","type":"PLAINTEXT"},
                {"name":"REACT_APP_CLIENT_ID","value":"#{APIDeploymentOutput.CognitoUserPoolClientId}","type":"PLAINTEXT"}
                ]'
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location:
          Ref: PipelineDeployBucket
      Tags:
        - Key: Project
          Value:
            Ref: ProjectName
        - Key: Owner
          Value: "Joe Darling"
