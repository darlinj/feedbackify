---
Description: Set up Cognito pool

Parameters:
  NamePrefix:
    Type: String
    Description: Name of the API - used to generate unique names for resources
    MinLength: 3
  SiteURL:
    Type: String
    Description: URL of the website

Resources:
  ChangeMessageLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${NamePrefix}-custom-message-lambda-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
  UserPoolLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: cognito-idp.amazonaws.com
      FunctionName: !Sub ${NamePrefix}-custom-message-lambda
      SourceArn: !GetAtt UserPool.Arn
  CustomMessageLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${NamePrefix}-custom-message-lambda
      Runtime: nodejs12.x
      Role: !GetAtt ChangeMessageLambdaRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          SiteURL: !Ref SiteURL
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
            if(event.triggerSource === "CustomMessage_SignUp") {
                const { codeParameter } = event.request
                const { userName, region } = event
                const { clientId } = event.callerContext
                const { email } = event.request.userAttributes
                const url = `${process.env.SiteURL}confirm`
                const link = `<a href="${url}?code=${codeParameter}&username=${userName}&clientId=${clientId}&region=${region}&email=${email}" target="_blank">here</a>`
                event.response.emailSubject = "Welcome to Feedbackify. Please verify your email"; 
                event.response.emailMessage = `Thank you for signing up. Please click ${link} to verify your email.`;
            }
            console.log(event)
            callback(null, event);
          };
  SNSRole:
    Type: AWS::IAM::Role
    Description: "An IAM Role to allow Cognito to send SNS messages"
    Properties:
      RoleName: !Sub ${NamePrefix}-cognito-sns-role
      ManagedPolicyArns:
        - Ref: CognitoSNSPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - cognito-idp.amazonaws.com
    DependsOn:
      - CognitoSNSPolicy
  CognitoSNSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow Amazon Cognito to access SNS
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:publish
            Resource: "*"
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Description: "A Cognito user pool for authenticating users"
    Properties:
      UserPoolName: !Sub ${NamePrefix}-user-pool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        From: "info@reflectify.net"
        ReplyToEmailAddress: "info@reflectify.net"
        SourceArn: arn:aws:ses:eu-west-1:760903257473:identity/info@reflectify.net
      LambdaConfig:
        CustomMessage: !GetAtt CustomMessageLambda.Arn
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: false

  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Description: "App Client used by AWS AppSync"
    Properties:
      ClientName: !Sub ${NamePrefix}-appsync-client
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:3000
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH

Outputs:
  UserPoolId:
    Description: The Pool ID of the Cognito User Pool
    Value: !Ref UserPool
  UserPoolClientId:
    Description: The Client ID for AWS AppSync Auth
    Value: !Ref UserPoolClient
